blueprint:
  name: EV Charging Notification (Mobile Push + TTS + Auto-Clear)
  description: >
    Send automatic updating EV charging notifications with dynamic icons.
    Mobile push notifications + optional TTS announcements.
  domain: automation

  input:
    charger_connection_status:
      name: Charger Connection Status Sensor
      selector:
        entity:
          domain: sensor

    charging_power:
      name: Charging Power Sensor (Watts)
      selector:
        entity:
          domain: sensor

    battery_level:
      name: Battery Charge Level Sensor (%)
      selector:
        entity:
          domain: sensor

    estimated_finish_time:
      name: Estimated Finish Time Sensor
      selector:
        entity:
          domain: sensor

    range_km:
      name: Estimated Range Sensor (Kilometers)
      selector:
        entity:
          domain: sensor

    notify_devices:
      name: Mobile Devices to Notify
      description: Select one or more mobile devices for push notifications.
      default: []
      selector:
        device:
          filter:
            - integration: mobile_app
          multiple: true

    tts_media_players:
      name: TTS Speakers (Optional)
      description: Choose media players to announce with TTS.
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    range_units:
      name: Preferred Distance Units
      description: Choose between miles or kilometers.
      default: miles
      selector:
        select:
          options:
            - miles
            - kilometers

trigger:
  - platform: state
    entity_id:
      - !input charger_connection_status
      - !input charging_power
      - !input battery_level
      - !input estimated_finish_time
      - !input range_km
    for:
      seconds: 30
  - platform: time_pattern
    minutes: '/2'

variables:
  charging_power_kw: >
    {% set p = states(inputs.charging_power)|float(0) %}
    {{ (p/1000)|round(1) }}
  battery_percent: >
    {{ states(inputs.battery_level)|float(0)|round(0) }}
  estimated_finish: >
    {{ states(inputs.estimated_finish_time) }}
  raw_range_km: >
    {{ states(inputs.range_km)|float(0) }}
  range_value: >
    {% if inputs.range_units == 'miles' %}
      {{ (raw_range_km * 0.621371)|round(0) }}
    {% else %}
      {{ raw_range_km|round(0) }}
    {% endif %}
  range_unit_label: >
    {{ 'miles' if inputs.range_units == 'miles' else 'km' }}
  notify_services: >
    {{ expand(inputs.notify_devices)
       | map(attribute='entity_id')
       | select('search','^notify\\.mobile_app_')
       | list }}
  is_charging: >
    {{ states(inputs.charger_connection_status)=='Connected'
       and (states(inputs.charging_power)|float(0))>100 }}

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ is_charging }}"
        sequence:
          - service: persistent_notification.create
            data:
              notification_id: ev_charging_status
              title: "⚡ Charging: {{ charging_power_kw }}kW at {{ battery_percent }}%"
              message: "Estimated to finish at {{ estimated_finish }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_services|length>0 }}"
                sequence:
                  - repeat:
                      for_each: "{{ notify_services }}"
                      sequence:
                        - service: "{{ repeat.item }}"
                          data:
                            title: "⚡ Charging: {{ charging_power_kw }}kW at {{ battery_percent }}%"
                            message: "Estimated to finish at {{ estimated_finish }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ inputs.tts_media_players|length>0 }}"
                sequence:
                  - service: tts.google_translate_say
                    data:
                      entity_id: !input tts_media_players
                      message: >
                        Charging started. Battery at {{ battery_percent }}%. 
                        Estimated finish at {{ estimated_finish }}.
                      cache: false

      - conditions:
          - condition: template
            value_template: "{{ states(inputs.charger_connection_status)=='Connected'
                                and (states(inputs.charging_power)|float(0))<=100 }}"
        sequence:
          - service: persistent_notification.create
            data:
              notification_id: ev_charging_status
              title: "✅ Fully Charged: {{ battery_percent }}%"
              message: "Estimated available range: {{ range_value }} {{ range_unit_label }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_services|length>0 }}"
                sequence:
                  - repeat:
                      for_each: "{{ notify_services }}"
                      sequence:
                        - service: "{{ repeat.item }}"
                          data:
                            title: "✅ Fully Charged: {{ battery_percent }}%"
                            message: "Estimated available range: {{ range_value }} {{ range_unit_label }}"

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ inputs.tts_media_players|length>0 }}"
                sequence:
                  - service: tts.google_translate_say
                    data:
                      entity_id: !input tts_media_players
                      message: >
                        Charging complete. Battery at {{ battery_percent }}%. 
                        Estimated range is {{ range_value }} {{ range_unit_label }}.
                      cache: false

      - conditions:
          - condition: template
            value_template: "{{ states(inputs.charger_connection_status)!='Connected' }}"
        sequence:
          - service: persistent_notification.dismiss
            data:
              notification_id: ev_charging_status

mode: single
